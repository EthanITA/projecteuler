#   Highly divisible triangular number

"""
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
"""

from problems1_10.largest_prime_factor import wikipedia_primality_test
import math
import time

start = time.time()


def triangle_numbers(n=0):
    """ Given an integer, the function will return the n-th triangle number """
    result = 0
    for i in range(n + 1):
        result += i
    return result


def primes_divisors(n):
    # WORKING ONLY FOR GREAT NUMBER
    """ Given an integer, the function will return an array of primes divisors of n """
    result = []
    for i in range(round(math.sqrt(n)), 1, -1):
        if (n % i == 0) and wikipedia_primality_test(i):
            result.append(i)
    return result


def divisors(n):
    """ Given a integer, the function will return an array of all divisors of n """
    result = [n]
    primes = primes_divisors(n)
    print(primes)
    for prime in primes:
        result.append(prime)
        while n % prime == 0 and n != 1:
            print(prime, n)
            n //= prime
            result.append(n)
    return result


def divisors2(n, primes, result=[]):
    result.append(n)
    for i in primes:
        if (n % i is 0) and (n // i not in result):
            divisors2(n // i, primes, result)

    # while n >= 1:
    #     newn = n
    #     for i in primes:
    #         while newn >= 1:
    #             for i in primes:
    #                 if (newn % i is 0) and (newn // i not in result):
    #                     result.append(newn // i)
    #                     newn //= i

    return result

    # primes = primes_divisors(n)
    # result = []
    # while not wikipedia_primality_test(n):
    #     for i in primes:
    #         while n % i == 0:


i = 1
n = triangle_numbers(i)
n_div = len(divisors2(n, primes_divisors(n)))
while n_div <= 500:
    print(i, n, n_div)
    i += 1
    n = triangle_numbers(i)
    n_div = len(divisors2(n, primes_divisors(n), []))

print(n)
# print((divisors2(5007953160, primes_divisors(5007953160))))

end = time.time()
print(end - start)
